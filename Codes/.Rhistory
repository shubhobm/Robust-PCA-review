## Multi-response model for Mosquito-Flavivirus connections
## version 2.01: average over multiple data frames
rm(list=ls())
# setwd("C:/Users/IBM_ADMIN/Box Sync/Hunting Zika Virus with Machine Learning (Cary Institute)")
setwd('/extdrive/Work/smajumd/Zika-codes')
source("bmlml.R")
library(mice)
library(miceadds)
library(parallel)
install.packages("mice")
install.packages("miceadds")
load("C:/Users/Subho/Box Sync/Hunting Zika Virus with Machine Learning (Cary Institute)/pred_matrix.rda")
load("D:/Study/My projects/fmri/all_list_1.Rda")
as.numeric(lapply(all.list,length))
all.list
?save
load("D:/Study/My projects/SNP-selection-twin-studies/Codes/outs.rda")
View(outs)
active.list = list(1:6, 7:10, 41:46, 47:50)
active.list
active.ind = unlist(active.list)
active.ind
best.index=7:17
active.list[[1]] %in% best.index
active.list[[2]] %in% best.index
(sum(active.list[[1]] %in% best.index)>0)
(sum(active.list[[2]] %in% best.index)>0)
load("D:/Study/My projects/SNP-selection-twin-studies/Codes/all_q9_mult6.Rda")
out.list
load("D:/Study/My projects/SNP-selection-twin-studies/Codes/all_q05_mult5.Rda")
out.list
load("D:/Study/My projects/SNP-selection-twin-studies/Codes/all_q9_mult6r.Rda")
out.list
install.packages("gee")
library(gee)
?gee
install.packages("MCMCglmm")
library(MCMCglmm)
?MCMCglmm
load("D:/Study/My projects/SNP-selection-twin-studies/Codes/qt_h10_rho7_big.Rda")
round(apply(simplify2array(all.list), 1:2, mean),2)
load("D:/Study/My projects/SNP-selection-twin-studies/Codes/qt_h10_rho7.Rda")
round(apply(simplify2array(all.list), 1:2, mean),2)
load("D:/Study/My projects/SNP-selection-twin-studies/Codes/fdr_h02_rho7_big.Rda")
round(apply(simplify2array(all.list), 1:2, mean),2)
all.list
load("D:/Study/My projects/SNP-selection-twin-studies/Codes/fdr1_h05_rho7_big.Rda")
round(apply(simplify2array(all.list), 1:2, mean),2)
load("D:/Study/My projects/SNP-selection-twin-studies/Codes/fdr1_h10_rho7_big.Rda")
round(apply(simplify2array(all.list), 1:2, mean),2)
load("D:/Study/My projects/SNP-selection-twin-studies/Codes/fdr1_h00_rho7_big.Rda")
round(apply(simplify2array(all.list), 1:2, mean),2)
load("D:/Study/My projects/SNP-selection-twin-studies/Codes/fdr_h00_rho7.Rda")
round(apply(simplify2array(all.list), 1:2, mean),2)
load("D:/Study/My projects/SNP-selection-twin-studies/Codes/fdr_h02_rho7.Rda")
round(apply(simplify2array(all.list), 1:2, mean),2)
load("D:/Study/My projects/SNP-selection-twin-studies/Codes/qtg_h10_rho7.Rda")
round(apply(simplify2array(all.list), 1:2, mean),2)
load("D:/Study/My projects/SNP-selection-twin-studies/Codes/qtg_h05_rho7.Rda")
round(apply(simplify2array(all.list), 1:2, mean),2)
load("D:/Study/My projects/SNP-selection-twin-studies/Codes/qt_h05_rho7_big.Rda")
round(apply(simplify2array(all.list), 1:2, mean),2)
load("D:/Study/My projects/SNP-selection-twin-studies/Codes/others_h05_rho07_big.Rda")
round(apply(simplify2array(all.list), 1:2, mean),2)
library(gee)
?gee
install.packages("cccp")
install.packages("lsgl")
install.packages("cccp")
require(cccp)
?cccp
#' Reconstructing Images using PCA
#' Examples are shown for PCA
#' TODO: example of reconstruction using KPCA, depth-pca and other pca
rm(list=ls())
library(png)
library(EBImage)
library(ripa)
library(rpca)
library(robustbase)
library(fda.usc)
library(rrcov)
library(pixmap)
setwd("D:/Study/My projects/Robust-PCA-review/Codes")
source('misc_functions.R')
process.img = function(img){
## add noise
n = nrow(img)
p = ncol(img)
img.noise = img
img.noise[sample(1:n,20),sample(1:p,20)] = sample(c(0,1), 20^2, replace=T)
mus = apply(img.noise, 2, mean)
sigmas = apply(img.noise, 2, sd)
img.noise.scaled = scale(img.noise, mus, scale=F)
res <- prcomp(img.noise.scaled)
pcnum <- 10 #Use first 20 principal components
img.trunc <- res$x[,1:pcnum] %*% t(res$rotation[,1:pcnum])
img.trunc = scale(img.trunc, -mus, scale=F)
## PCP
pcpmod = rpca(img.noise.scaled)
img.pcp = scale(pcpmod$L, -mus, scale=F)
## DPCA
pcarank <- PcaRank(img.noise.scaled, k=pcnum)
img.dpca  = pcarank@scores %*% t(pcarank@loadings)
img.dpca = scale(img.dpca, -mus, scale=F)
# img.trunc = pcarank@scores
## ROBPCA
pcarob <- PcaHubert(img.noise.scaled, k=pcnum)
img.rpca  = pcarob@scores %*% t(pcarob@loadings)
img.rpca = scale(img.rpca, -mus, scale=F)
plot(imagematrix(img))
plot(imagematrix(img.noise))
plot(imagematrix(img.dpca))
plot(imagematrix(img.rpca))
plot(imagematrix(img.pcp))
}
lenna = readPNG("lenna.png")
yale01 = imagematrix(getChannels(read.pnm(("yaleB01_P00A+005E+10.pgm"))))
yale02 = imagematrix(getChannels(read.pnm(("yaleB02_P00A+005E+10.pgm"))))
yale28 = imagematrix(getChannels(read.pnm(("yaleB28_P00A+005E+10.pgm"))))
process.img(imagematrix(lenna))
?rowsum
?rows
z = matrix(rep(1,4),2,2)
z
rows(z)
row(z)
col(z)
cbind(row(z),col(z))
cbind(as.numeric(row(z)),as.numeric(col(z)))
lenna = readPNG("lenna.png")
yale01 = imagematrix(getChannels(read.pnm(("yaleB01_P00A+005E+10.pgm"))))
yale02 = imagematrix(getChannels(read.pnm(("yaleB02_P00A+005E+10.pgm"))))
yale28 = imagematrix(getChannels(read.pnm(("yaleB28_P00A+005E+10.pgm"))))
lenna.small = imagematrix(resize(lenna, 96, 96))
yale01.small = imagematrix(resize(yale01, 96, 84))
yale02.small = imagematrix(resize(yale02, 96, 84))
yale28.small = imagematrix(resize(yale28, 96, 84))
img = lenna.small
## add noise
n = nrow(img)
p = ncol(img)
img.noise = img
img.ind = cbind(as.numeric(row(img.noise)), as.numeric(col(img.noise)))
n.noise = ceiling(.1*length(img.noise))
img.noise[img.ind[sample(1:n.noise, n.noise)]] = sample(c(0,1), n.noise, replace=T)
process.img = function(img){
## add noise
n = nrow(img)
p = ncol(img)
## add speckle noise to 10% pixels
img.noise = img
img.ind = cbind(as.numeric(row(img.noise)), as.numeric(col(img.noise)))
n.noise = ceiling(.1*length(img.noise))
img.noise[img.ind[sample(1:n.noise, n.noise)]] = sample(c(0,1), n.noise, replace=T)
mus = apply(img.noise, 2, mean)
sigmas = apply(img.noise, 2, sd)
img.noise.scaled = scale(img.noise, mus, scale=F)
res <- prcomp(img.noise.scaled)
pcnum <- 10 #Use first 20 principal components
img.trunc <- res$x[,1:pcnum] %*% t(res$rotation[,1:pcnum])
img.trunc = scale(img.trunc, -mus, scale=F)
## PCP
pcpmod = rpca(img.noise.scaled)
img.pcp = scale(pcpmod$L, -mus, scale=F)
## DPCA
pcarank <- PcaRank(img.noise.scaled, k=pcnum)
img.dpca  = pcarank@scores %*% t(pcarank@loadings)
img.dpca = scale(img.dpca, -mus, scale=F)
# img.trunc = pcarank@scores
## ROBPCA
pcarob <- PcaHubert(img.noise.scaled, k=pcnum)
img.rpca  = pcarob@scores %*% t(pcarob@loadings)
img.rpca = scale(img.rpca, -mus, scale=F)
plot(imagematrix(img))
plot(imagematrix(img.noise))
plot(imagematrix(img.dpca))
plot(imagematrix(img.rpca))
plot(imagematrix(img.pcp))
}
lenna = readPNG("lenna.png")
yale01 = imagematrix(getChannels(read.pnm(("yaleB01_P00A+005E+10.pgm"))))
yale02 = imagematrix(getChannels(read.pnm(("yaleB02_P00A+005E+10.pgm"))))
yale28 = imagematrix(getChannels(read.pnm(("yaleB28_P00A+005E+10.pgm"))))
lenna.small = imagematrix(resize(lenna, 96, 96))
yale01.small = imagematrix(resize(yale01, 96, 84))
yale02.small = imagematrix(resize(yale02, 96, 84))
yale28.small = imagematrix(resize(yale28, 96, 84))
set.seed(08162017)
defaultPar = par()
par(mfrow=c(4,5), mai=rep(0.1,4))
process.img(lenna.small)
process.img(yale01.small)
process.img(yale02.small)
process.img(yale28.small)
par(defaultPar)
img.ind[sample(1:n.noise, n.noise)]
dim(img.ind)
dim(img.ind[sample(1:n.noise, n.noise),])
p = ncol(img)
## add speckle noise to 10% pixels
img.noise = img
img.ind = cbind(as.numeric(row(img.noise)), as.numeric(col(img.noise)))
n.noise = ceiling(.1*length(img.noise))
img.noise[img.ind[sample(1:n.noise, n.noise),]] = sample(c(0,1), n.noise, replace=T)
plot(imagematrix(img.noise))
head(img.ind)
n = nrow(img)
p = ncol(img)
nn = n*p
## add speckle noise to 10% pixels
img.noise = img
img.ind = cbind(as.numeric(row(img.noise)), as.numeric(col(img.noise)))
n.noise = ceiling(.1*nn)
img.noise[img.ind[sample(1:nn, n.noise),]] = sample(c(0,1), n.noise, replace=T)
plot(imagematrix(img.noise))
process.img = function(img){
## add noise
n = nrow(img)
p = ncol(img)
nn = n*p
## add speckle noise to 10% pixels
img.noise = img
img.ind = cbind(as.numeric(row(img.noise)), as.numeric(col(img.noise)))
n.noise = ceiling(.1*nn)
img.noise[img.ind[sample(1:nn, n.noise),]] = sample(c(0,1), n.noise, replace=T)
mus = apply(img.noise, 2, mean)
sigmas = apply(img.noise, 2, sd)
img.noise.scaled = scale(img.noise, mus, scale=F)
res <- prcomp(img.noise.scaled)
pcnum <- 10 #Use first 20 principal components
img.trunc <- res$x[,1:pcnum] %*% t(res$rotation[,1:pcnum])
img.trunc = scale(img.trunc, -mus, scale=F)
## PCP
pcpmod = rpca(img.noise.scaled)
img.pcp = scale(pcpmod$L, -mus, scale=F)
## DPCA
pcarank <- PcaRank(img.noise.scaled, k=pcnum)
img.dpca  = pcarank@scores %*% t(pcarank@loadings)
img.dpca = scale(img.dpca, -mus, scale=F)
# img.trunc = pcarank@scores
## ROBPCA
pcarob <- PcaHubert(img.noise.scaled, k=pcnum)
img.rpca  = pcarob@scores %*% t(pcarob@loadings)
img.rpca = scale(img.rpca, -mus, scale=F)
plot(imagematrix(img))
plot(imagematrix(img.noise))
plot(imagematrix(img.dpca))
plot(imagematrix(img.rpca))
plot(imagematrix(img.pcp))
}
lenna = readPNG("lenna.png")
yale01 = imagematrix(getChannels(read.pnm(("yaleB01_P00A+005E+10.pgm"))))
yale02 = imagematrix(getChannels(read.pnm(("yaleB02_P00A+005E+10.pgm"))))
yale28 = imagematrix(getChannels(read.pnm(("yaleB28_P00A+005E+10.pgm"))))
lenna.small = imagematrix(resize(lenna, 96, 96))
yale01.small = imagematrix(resize(yale01, 96, 84))
yale02.small = imagematrix(resize(yale02, 96, 84))
yale28.small = imagematrix(resize(yale28, 96, 84))
set.seed(08162017)
defaultPar = par()
par(mfrow=c(4,5), mai=rep(0.1,4))
process.img(lenna.small)
process.img(yale01.small)
process.img(yale02.small)
process.img(yale28.small)
par(defaultPar)
#' Reconstructing Images using PCA
#' Examples are shown for PCA
#' TODO: example of reconstruction using KPCA, depth-pca and other pca
rm(list=ls())
library(png)
library(EBImage)
library(ripa)
library(rpca)
library(robustbase)
library(fda.usc)
library(rrcov)
library(pixmap)
setwd("D:/Study/My projects/Robust-PCA-review/Codes")
source('misc_functions.R')
lenna = readPNG("lenna.png")
yale01 = imagematrix(getChannels(read.pnm(("yaleB01_P00A+005E+10.pgm"))))
yale02 = imagematrix(getChannels(read.pnm(("yaleB02_P00A+005E+10.pgm"))))
yale28 = imagematrix(getChannels(read.pnm(("yaleB28_P00A+005E+10.pgm"))))
lenna.small = imagematrix(resize(lenna, 96, 96))
yale01.small = imagematrix(resize(yale01, 96, 84))
yale02.small = imagematrix(resize(yale02, 96, 84))
yale28.small = imagematrix(resize(yale28, 96, 84))
add.noise.and.plot = function(img){
## add noise
n = nrow(img)
p = ncol(img)
nn = n*p
## add speckle noise to 10% pixels
img.noise = img
img.ind = cbind(as.numeric(row(img.noise)), as.numeric(col(img.noise)))
n.noise = ceiling(.1*nn)
img.noise[img.ind[sample(1:nn, n.noise),]] = sample(c(0,1), n.noise, replace=T)
plot(imagematrix(img.noise))
}
set.seed(08162017)
defaultPar = par()
par(mfrow=c(2,4), mai=rep(0.1,4))
plot(imagematrix(lenna.small))
add.noise.and.plot(lenna.small)
plot(imagematrix(yale01.small))
add.noise.and.plot(yale01.small)
plot(imagematrix(yale02.small))
add.noise.and.plot(yale02.small)
plot(imagematrix(yale28.small))
add.noise.and.plot(yale28.small)
par(defaultPar)
set.seed(08162017)
defaultPar = par()
par(mfrow=c(2,4), mai=rep(0.1,4))
plot(imagematrix(lenna.small))
plot(imagematrix(yale01.small))
plot(imagematrix(yale02.small))
plot(imagematrix(yale28.small))
add.noise.and.plot(lenna.small)
add.noise.and.plot(yale01.small)
add.noise.and.plot(yale02.small)
add.noise.and.plot(yale28.small)
par(defaultPar)
