evmcd <- getEigenvalues(pcamcd)
#evogk <- getEigenvalues(pcaogk)
evrank = getEigenvalues(pcarank)
uvar <- matrix(nrow=6, ncol=6)
svar <- sum(ev)
svarrob <- sum(evrob)
svarhub <- sum(evhub)
svarmcd <- sum(evmcd)
#svarogk <- sum(evogk)
svarrank = sum(evrank)
for(i in 1:6){
uvar[i,1] <- i
uvar[i,2] <- round((svar - sum(ev[1:i]))/svar, 3)
uvar[i,3] <- round((svarrob - sum(evrob[1:i]))/svarrob, 3)
uvar[i,4] <- round((svarhub - sum(evhub[1:i]))/svarhub, 3)
uvar[i,5] <- round((svarmcd - sum(evmcd[1:i]))/svarmcd, 3)
#  uvar[i,6] <- round((svarogk - sum(evogk[1:i]))/svarogk, 3)
uvar[i,6] <- round((svarrank - sum(evrank[1:i]))/svarrank, 3)
}
uvar <- as.data.frame(uvar)
names(uvar) <- c("q", "Classical","Spherical", "Hubert", "MCD", "Depth")
cat("\nBus data: proportion of unexplained variability for q components\n")
print(uvar)
## Reproduce Table 6.4 from Maronna et al. (2006), page 214, adding DCM
##
## Compute classical and robust PCA extracting only the first 3 components
## and take the squared orthogonal distances to the 3-dimensional hyperplane
##
pca3 <- PcaClassic(bus2, k=3)               # classical
rpca3 <- PcaLocantore(bus2, k=3)            # spherical (Locantore, 1999)
hpca3 <- PcaHubert(bus2, k=3)               # Hubert
mpca3 = PcaCov(bus2, cov.control=CovControlMcd(), k=3) # MCD
dpca3 = PcaRank(bus2, k=3)                  # Depth
system.time(ppca3 <- rpca(as.matrix(bus2)))
system.time(pcarank <- PcaRank(bus2, k=3))
pca3 <- PcaClassic(bus2, k=3)               # classical
rpca3 <- PcaLocantore(bus2, k=3)            # spherical (Locantore, 1999)
hpca3 <- PcaHubert(bus2, k=3)               # Hubert
mpca3 = PcaCov(bus2, cov.control=CovControlMcd(), k=3) # MCD
dpca3 = PcaRank(bus2, k=3)
system.time(ppca3 <- rpca(as.matrix(bus2)))
dist <- pca3@od^2
rdist <- rpca3@od^2
hdist <- hpca3@od^2
mdist = mpca3@od^2
ddist = dpca3@od^2
pdist = rowSums(ppca3$S^2)
## calculate the quantiles of the distances to the 3-dimensional hyperplane
qclass  <- round(quantile(dist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qspc <- round(quantile(rdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qhubert <- round(quantile(hdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qmcd <- round(quantile(mdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qdepth <- round(quantile(ddist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qpcp <- round(quantile(pdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qq <- cbind(rbind(qclass, qspc, qhubert, qmcd, qdepth, qpcp),
round(c(max(dist), max(rdist), max(hdist), max(mdist), max(ddist), max(pdist)), 0))
colnames(qq)[10] <- "Max"
rownames(qq) <- c("Classical", "Spherical", "Hubert", "MCD", "Depth", "PCP")
cat("\nBus data: quantiles of distances to hyperplane\n")
print(qq)
qq <- cbind(rbind(qclass, qspc, qhubert, qdepth, qpcp),
round(c(max(dist), max(rdist), max(hdist), max(ddist), max(pdist)), 0))
colnames(qq)[10] <- "Max"
rownames(qq) <- c("Classical", "Spherical", "Hubert", "Depth", "PCP")
cat("\nBus data: quantiles of distances to hyperplane\n")
print(qq)
pca3 <- PcaClassic(bus2, k=3)               # classical
rpca3 <- PcaLocantore(bus2, k=3)            # spherical (Locantore, 1999)
hpca3 <- PcaHubert(bus2, k=3)               # Hubert
mpca3 = PcaCov(bus2, cov.control=CovControlMcd(), k=3) # MCD
dpca3 = PcaRank(bus2, k=3)                  # Depth
system.time(ppca3 <- rpca(as.matrix(bus2)))
dist <- pca3@od^2
rdist <- rpca3@od^2
hdist <- hpca3@od^2
mdist = mpca3@od^2
ddist = dpca3@od^2
pdist = rowSums(ppca3$S^2)
dist
qq <- cbind(rbind(qclass, qspc, qhubert, qdepth, qpcp),
round(c(max(dist), max(rdist), max(hdist), max(ddist), max(pdist)), 10))
colnames(qq)[10] <- "Max"
rownames(qq) <- c("Classical", "Spherical", "Hubert", "Depth", "PCP")
cat("\nBus data: quantiles of distances to hyperplane\n")
print(qq)
qclass  <- round(quantile(dist, probs = seq(0, 1, 0.1)[-c(1,11)]), 10)
qspc <- round(quantile(rdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 10)
qhubert <- round(quantile(hdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 10)
# qmcd <- round(quantile(mdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qdepth <- round(quantile(ddist, probs = seq(0, 1, 0.1)[-c(1,11)]), 10)
qpcp <- round(quantile(pdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 10)
qq <- cbind(rbind(qclass, qspc, qhubert, qdepth, qpcp),
round(c(max(dist), max(rdist), max(hdist), max(ddist), max(pdist)), 10))
colnames(qq)[10] <- "Max"
rownames(qq) <- c("Classical", "Spherical", "Hubert", "Depth", "PCP")
cat("\nBus data: quantiles of distances to hyperplane\n")
print(qq)
bus2 = scale(bus2)
pca3 <- PcaClassic(bus2, k=3)               # classical
rpca3 <- PcaLocantore(bus2, k=3)            # spherical (Locantore, 1999)
hpca3 <- PcaHubert(bus2, k=3)               # Hubert
mpca3 = PcaCov(bus2, cov.control=CovControlMcd(), k=3) # MCD
dpca3 = PcaRank(bus2, k=3)                  # Depth
system.time(ppca3 <- rpca(as.matrix(bus2)))
dist <- pca3@od^2
rdist <- rpca3@od^2
hdist <- hpca3@od^2
mdist = mpca3@od^2
ddist = dpca3@od^2
pdist = rowSums(ppca3$S^2)
## calculate the quantiles of the distances to the 3-dimensional hyperplane
qclass  <- round(quantile(dist, probs = seq(0, 1, 0.1)[-c(1,11)]), 10)
qspc <- round(quantile(rdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 10)
qhubert <- round(quantile(hdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 10)
# qmcd <- round(quantile(mdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qdepth <- round(quantile(ddist, probs = seq(0, 1, 0.1)[-c(1,11)]), 10)
qpcp <- round(quantile(pdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 10)
qq <- cbind(rbind(qclass, qspc, qhubert, qdepth, qpcp),
round(c(max(dist), max(rdist), max(hdist), max(ddist), max(pdist)), 10))
colnames(qq)[10] <- "Max"
rownames(qq) <- c("Classical", "Spherical", "Hubert", "Depth", "PCP")
cat("\nBus data: quantiles of distances to hyperplane\n")
print(qq)
data(bus)
bus1 <- bus[, -9]
madbus <- apply(bus1, 2, mad)
bus2 <- sweep(bus1, 2, madbus, "/", check.margin = FALSE)
pca3 <- PcaClassic(bus2, k=3)               # classical
rpca3 <- PcaLocantore(bus2, k=3)            # spherical (Locantore, 1999)
hpca3 <- PcaHubert(bus2, k=3)               # Hubert
mpca3 = PcaCov(bus2, cov.control=CovControlMcd(), k=3) # MCD
dpca3 = PcaRank(bus2, k=3)                  # Depth
dist <- pca3@od^2
rdist <- rpca3@od^2
hdist <- hpca3@od^2
mdist = mpca3@od^2
ddist = dpca3@od^2
pdist = rowSums(ppca3$S^2)
## calculate the quantiles of the distances to the 3-dimensional hyperplane
qclass  <- round(quantile(dist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qspc <- round(quantile(rdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qhubert <- round(quantile(hdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qmcd <- round(quantile(mdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qdepth <- round(quantile(ddist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qpcp <- round(quantile(pdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qq <- cbind(rbind(qclass, qspc, qhubert, qmcd, qdepth, qpcp),
round(c(max(dist), max(rdist), max(hdist), max(mdist), max(ddist), max(pdist)), 0))
colnames(qq)[10] <- "Max"
rownames(qq) <- c("Classical", "Spherical", "Hubert", "MCD", "Depth", "PCP")
cat("\nBus data: quantiles of distances to hyperplane\n")
print(qq)
pca3 <- PcaClassic(bus2, k=3)               # classical
rpca3 <- PcaLocantore(bus2, k=3)            # spherical (Locantore, 1999)
hpca3 <- PcaHubert(bus2, k=3)               # Hubert
mpca3 = PcaCov(bus2, cov.control=CovControlMcd(), k=3) # MCD
dpca3 = PcaRank(bus2, k=3)                  # Depth
dist <- pca3@od^2
rdist <- rpca3@od^2
hdist <- hpca3@od^2
mdist = mpca3@od^2
ddist = dpca3@od^2
## calculate the quantiles of the distances to the 3-dimensional hyperplane
qclass  <- round(quantile(dist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qspc <- round(quantile(rdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qhubert <- round(quantile(hdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qmcd <- round(quantile(mdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qdepth <- round(quantile(ddist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qq <- cbind(rbind(qclass, qspc, qhubert, qmcd, qdepth, qpcp),
round(c(max(dist), max(rdist), max(hdist), max(mdist), max(ddist), 0))
colnames(qq)[10] <- "Max"
rownames(qq) <- c("Classical", "Spherical", "Hubert", "MCD", "Depth")
cat("\nBus data: quantiles of distances to hyperplane\n")
print(qq)
qq <- cbind(rbind(qclass, qspc, qhubert, qmcd, qdepth, qpcp),
round(c(max(dist), max(rdist), max(hdist), max(mdist), max(ddist)), 0))
colnames(qq)[10] <- "Max"
rownames(qq) <- c("Classical", "Spherical", "Hubert", "MCD", "Depth", "PCP")
cat("\nBus data: quantiles of distances to hyperplane\n")
print(qq)
rownames(qq) <- c("Classical", "Spherical", "Hubert", "MCD", "Depth")
qq <- cbind(rbind(qclass, qspc, qhubert, qmcd, qdepth),
round(c(max(dist), max(rdist), max(hdist), max(mdist), max(ddist)), 0))
colnames(qq)[10] <- "Max"
rownames(qq) <- c("Classical", "Spherical", "Hubert", "MCD", "Depth")
cat("\nBus data: quantiles of distances to hyperplane\n")
print(qq)
pca3 <- PcaClassic(bus2, k=3)               # classical
rpca3 <- PcaLocantore(bus2, k=3)            # spherical (Locantore, 1999)
hpca3 <- PcaHubert(bus2, k=3)               # Hubert
mpca3 = PcaCov(bus2, cov.control=CovControlMcd(), k=3) # MCD
dpca3 = PcaRank(bus2, k=3)                  # Depth
system.time(ppca3 = rpca(bus2))
dist <- pca3@od^2
rdist <- rpca3@od^2
hdist <- hpca3@od^2
mdist = mpca3@od^2
ddist = dpca3@od^2
pdist = rowSums(ppca3$S^2)
## calculate the quantiles of the distances to the 3-dimensional hyperplane
qclass  <- round(quantile(dist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qspc <- round(quantile(rdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qhubert <- round(quantile(hdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qmcd <- round(quantile(mdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qdepth <- round(quantile(ddist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qpcp <- round(quantile(pdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qq <- cbind(rbind(qclass, qspc, qhubert, qmcd, qdepth, qpcp),
round(c(max(dist), max(rdist), max(hdist), max(mdist), max(ddist), max(pdist)), 0))
colnames(qq)[10] <- "Max"
rownames(qq) <- c("Classical", "Spherical", "Hubert", "MCD", "Depth", "PCP")
cat("\nBus data: quantiles of distances to hyperplane\n")
print(qq)
dim(bus2)
rm(list=ls())
setwd("d:/Study/My projects/Depth-scatter/Codes")
source('misc_functions.R')
## Octane data
library(ellipse)
library(rrcov)
library(fda.usc)
set.seed(04112015)
## Analyze bus data
data(bus)
bus1 <- bus[, -9]
madbus <- apply(bus1, 2, mad)
bus2 <- sweep(bus1, 2, madbus, "/", check.margin = FALSE)
# bus2 = scale(bus2)
system.time(pca <- PcaClassic(bus2))
system.time(rpca <- PcaLocantore(bus2))
system.time(pcaHubert <- PcaHubert(bus2, k=17, kmax=17, mcd=FALSE))
system.time(pcamcd <- PcaCov(bus2, cov.control=CovControlMcd()))
#pcaogk <- PcaCov(bus2, cov.control=CovControlOgk())
system.time(pcarank <- PcaRank(bus2))
ev <- getEigenvalues(pca)
evrob <- getEigenvalues(rpca)
evhub <- getEigenvalues(pcaHubert)
evmcd <- getEigenvalues(pcamcd)
#evogk <- getEigenvalues(pcaogk)
evrank = getEigenvalues(pcarank)
uvar <- matrix(nrow=6, ncol=6)
svar <- sum(ev)
svarrob <- sum(evrob)
svarhub <- sum(evhub)
svarmcd <- sum(evmcd)
#svarogk <- sum(evogk)
svarrank = sum(evrank)
for(i in 1:6){
uvar[i,1] <- i
uvar[i,2] <- round((svar - sum(ev[1:i]))/svar, 3)
uvar[i,3] <- round((svarrob - sum(evrob[1:i]))/svarrob, 3)
uvar[i,4] <- round((svarhub - sum(evhub[1:i]))/svarhub, 3)
uvar[i,5] <- round((svarmcd - sum(evmcd[1:i]))/svarmcd, 3)
#  uvar[i,6] <- round((svarogk - sum(evogk[1:i]))/svarogk, 3)
uvar[i,6] <- round((svarrank - sum(evrank[1:i]))/svarrank, 3)
}
uvar <- as.data.frame(uvar)
names(uvar) <- c("q", "Classical","Spherical", "Hubert", "MCD", "Depth")
cat("\nBus data: proportion of unexplained variability for q components\n")
print(uvar)
## Reproduce Table 6.4 from Maronna et al. (2006), page 214, adding DCM
##
## Compute classical and robust PCA extracting only the first 3 components
## and take the squared orthogonal distances to the 3-dimensional hyperplane
##
pca3 <- PcaClassic(bus2, k=3)               # classical
rpca3 <- PcaLocantore(bus2, k=3)            # spherical (Locantore, 1999)
hpca3 <- PcaHubert(bus2, k=3)               # Hubert
mpca3 = PcaCov(bus2, cov.control=CovControlMcd(), k=3) # MCD
dpca3 = PcaRank(bus2, k=3)                  # Depth
system.time(ppca3 = rpca(bus2))
dist <- pca3@od^2
rdist <- rpca3@od^2
hdist <- hpca3@od^2
mdist = mpca3@od^2
ddist = dpca3@od^2
pdist = rowSums(ppca3$S^2)
## calculate the quantiles of the distances to the 3-dimensional hyperplane
qclass  <- round(quantile(dist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qspc <- round(quantile(rdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qhubert <- round(quantile(hdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qmcd <- round(quantile(mdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qdepth <- round(quantile(ddist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qpcp <- round(quantile(pdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qq <- cbind(rbind(qclass, qspc, qhubert, qmcd, qdepth, qpcp),
round(c(max(dist), max(rdist), max(hdist), max(mdist), max(ddist), max(pdist)), 0))
colnames(qq)[10] <- "Max"
rownames(qq) <- c("Classical", "Spherical", "Hubert", "MCD", "Depth", "PCP")
cat("\nBus data: quantiles of distances to hyperplane\n")
print(qq)
system.time(ppca3 <- rpca(bus2))
system.time(ppca3 <- rpca(as.matrix(bus2)))
dist <- pca3@od^2
rdist <- rpca3@od^2
hdist <- hpca3@od^2
mdist = mpca3@od^2
ddist = dpca3@od^2
pdist = rowSums(ppca3$S^2)
qclass  <- round(quantile(dist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qspc <- round(quantile(rdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qhubert <- round(quantile(hdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qmcd <- round(quantile(mdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qdepth <- round(quantile(ddist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qpcp <- round(quantile(pdist, probs = seq(0, 1, 0.1)[-c(1,11)]), 1)
qq <- cbind(rbind(qclass, qspc, qhubert, qmcd, qdepth, qpcp),
round(c(max(dist), max(rdist), max(hdist), max(mdist), max(ddist), max(pdist)), 0))
colnames(qq)[10] <- "Max"
rownames(qq) <- c("Classical", "Spherical", "Hubert", "MCD", "Depth", "PCP")
cat("\nBus data: quantiles of distances to hyperplane\n")
print(qq)
setwd("D:/Study/My projects/Robust-PCA-review")
library(png)
setwd("D:/Study/My projects/Robust-PCA-review")
lenna.orig <- readPNG("lenna.png")
plot(lenna.orig.)
plot(lenna.orig)
image(lenna.orig)
image(t(lenna.orig)
)
?image
lenna.orig <- readPNG("lenna.png")
res <- prcomp(lenna.orig, center = TRUE, scale = FALSE)
res.kpca <- KPCA(lenna.orig,nfeatures = 20)
pcnum <- 1 #Use first 20 principal components
lenna.trunc <- res$x[,1:pcnum] %*% t(res$rotation[,1:pcnum])
#how to recover image in kpca?
#lenna.trunc.kpc <- res.kpca$proj%*%t(res.kpca$pc)%*%res.kpca$x
if(res$scale != FALSE){
lenna.trunc <- scale(lenna.trunc, center = FALSE , scale=1/res$scale)
}
if(res$center != FALSE){
lenna.trunc <- scale(lenna.trunc, center = -1 * res$center, scale=FALSE)
}
lenna.orig <- readPNG("lenna.png")
res <- prcomp(lenna.orig, center = TRUE, scale = FALSE)
pcnum <- 1 #Use first 20 principal components
lenna.trunc <- res$x[,1:pcnum] %*% t(res$rotation[,1:pcnum])
#how to recover image in kpca?
#lenna.trunc.kpc <- res.kpca$proj%*%t(res.kpca$pc)%*%res.kpca$x
if(res$scale != FALSE){
lenna.trunc <- scale(lenna.trunc, center = FALSE , scale=1/res$scale)
}
if(res$center != FALSE){
lenna.trunc <- scale(lenna.trunc, center = -1 * res$center, scale=FALSE)
}
image(lenna.trunc)
res <- prcomp(lenna.orig, center = TRUE, scale = FALSE)
pcnum <- 5 #Use first 20 principal components
lenna.trunc <- res$x[,1:pcnum] %*% t(res$rotation[,1:pcnum])
#how to recover image in kpca?
#lenna.trunc.kpc <- res.kpca$proj%*%t(res.kpca$pc)%*%res.kpca$x
if(res$scale != FALSE){
lenna.trunc <- scale(lenna.trunc, center = FALSE , scale=1/res$scale)
}
if(res$center != FALSE){
lenna.trunc <- scale(lenna.trunc, center = -1 * res$center, scale=FALSE)
}
image(lenna.trunc)\
image(lenna.trunc)
pcnum <- 50 #Use first 20 principal components
lenna.trunc <- res$x[,1:pcnum] %*% t(res$rotation[,1:pcnum])
#how to recover image in kpca?
#lenna.trunc.kpc <- res.kpca$proj%*%t(res.kpca$pc)%*%res.kpca$x
if(res$scale != FALSE){
lenna.trunc <- scale(lenna.trunc, center = FALSE , scale=1/res$scale)
}
if(res$center != FALSE){
lenna.trunc <- scale(lenna.trunc, center = -1 * res$center, scale=FALSE)
}
image(lenna.trunc)
?image
par(mfrow=c(1,2))
image(lenna.orig)
image(lenna.trunc)
par(mfrow=c(1,1))
library(png)
setwd("D:/Study/My projects/Robust-PCA-review")
lenna.orig <- readPNG("lenna.png")
res <- prcomp(lenna.orig, center = TRUE, scale = FALSE)
pcnum <- 20 #Use first 20 principal components
lenna.trunc <- res$x[,1:pcnum] %*% t(res$rotation[,1:pcnum])
#how to recover image in kpca?
#lenna.trunc.kpc <- res.kpca$proj%*%t(res.kpca$pc)%*%res.kpca$x
if(res$scale != FALSE){
lenna.trunc <- scale(lenna.trunc, center = FALSE , scale=1/res$scale)
}
if(res$center != FALSE){
lenna.trunc <- scale(lenna.trunc, center = -1 * res$center, scale=FALSE)
}
par(mfrow=c(1,2))
image(lenna.orig)
image(lenna.trunc)
par(mfrow=c(1,1))
library(png)
setwd("D:/Study/My projects/Robust-PCA-review")
lenna.orig <- readPNG("lenna.png")
## add noise
lenna.noise = lenna.orig
for(i in 31:50)
for(j in 31:70)
lenna.noise[i,j] = runif(1)
res <- prcomp(lenna.noise, center = TRUE, scale = FALSE)
pcnum <- 20 #Use first 20 principal components
lenna.trunc <- res$x[,1:pcnum] %*% t(res$rotation[,1:pcnum])
#how to recover image in kpca?
#lenna.trunc.kpc <- res.kpca$proj%*%t(res.kpca$pc)%*%res.kpca$x
if(res$scale != FALSE){
lenna.trunc <- scale(lenna.trunc, center = FALSE , scale=1/res$scale)
}
if(res$center != FALSE){
lenna.trunc <- scale(lenna.trunc, center = -1 * res$center, scale=FALSE)
}
par(mfrow=c(1,2))
image(lenna.orig)
image(lenna.trunc)
par(mfrow=c(1,1))
par(mfrow=c(1,2))
image(lenna.noise)
image(lenna.trunc)
par(mfrow=c(1,1))
lenna.noise = lenna.orig
for(i in 31:150)
for(j in 31:170)
lenna.noise[i,j] = runif(1)
res <- prcomp(lenna.noise, center = TRUE, scale = FALSE)
pcnum <- 20 #Use first 20 principal components
lenna.trunc <- res$x[,1:pcnum] %*% t(res$rotation[,1:pcnum])
#how to recover image in kpca?
#lenna.trunc.kpc <- res.kpca$proj%*%t(res.kpca$pc)%*%res.kpca$x
if(res$scale != FALSE){
lenna.trunc <- scale(lenna.trunc, center = FALSE , scale=1/res$scale)
}
if(res$center != FALSE){
lenna.trunc <- scale(lenna.trunc, center = -1 * res$center, scale=FALSE)
}
par(mfrow=c(1,2))
image(lenna.noise)
image(lenna.trunc)
par(mfrow=c(1,1))
image(t(t(t(lenna.noise))
image(lenna.trunc)
par(mfrow=c(1,1))
r1 <- writePNG(lenna.orig,target="lenna_orig.png")
r <- writePNG(lenna.trunc,target="lenna_recon.png")
image(t(t(t(lenna.noise))))
image(t(t(lenna.noise)))
r1 <- writePNG(lenna.noise,target="lenna_orig.png")
r <- writePNG(lenna.trunc,target="lenna_recon.png")
library(png)
setwd("D:/Study/My projects/Robust-PCA-review")
lenna.orig <- readPNG("lenna.png")
## add noise
lenna.noise = lenna.orig
for(i in 31:150)
for(j in 31:170)
lenna.noise[i,j] = runif(1)
res <- prcomp(lenna.orig, center = TRUE, scale = FALSE)
pcnum <- 20 #Use first 20 principal components
lenna.trunc <- res$x[,1:pcnum] %*% t(res$rotation[,1:pcnum])
#how to recover image in kpca?
#lenna.trunc.kpc <- res.kpca$proj%*%t(res.kpca$pc)%*%res.kpca$x
if(res$scale != FALSE){
lenna.trunc <- scale(lenna.trunc, center = FALSE , scale=1/res$scale)
}
if(res$center != FALSE){
lenna.trunc <- scale(lenna.trunc, center = -1 * res$center, scale=FALSE)
}
par(mfrow=c(1,2))
image(t(t(lenna.noise)))
image(lenna.trunc)
par(mfrow=c(1,1))
r1 <- writePNG(lenna.noise,target="lenna_orig.png")
r <- writePNG(lenna.trunc,target="lenna_recon.png")
#r3 <- writePNG(lenna.trunc.kpc,target="lenna_recon_kpc.png")
library(rpca)
pcpmod = rpca(image.noise)
pcpmod = rpca(lenna.noise)
lenna64 = resize(lenna.orig, 64, 64)
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
library(EBImage)
setwd("D:/Study/My projects/Robust-PCA-review")
lenna.orig <- readPNG("lenna.png")
lenna64 = resize(lenna.orig, 64, 64)
image(lenna64)
install.packages("ripa")
library(ripa)
lenna64 = imagematrix(resize(lenna.orig, 64, 64))
image(lenna64)
lenna.noise = lenna64
for(i in 31:50)
for(j in 31:50)
lenna.noise[i,j] = runif(1)
res <- prcomp(lenna.orig, center = TRUE, scale = FALSE)
pcnum <- 20 #Use first 20 principal components
lenna.trunc <- res$x[,1:pcnum] %*% t(res$rotation[,1:pcnum])
#how to recover image in kpca?
#lenna.trunc.kpc <- res.kpca$proj%*%t(res.kpca$pc)%*%res.kpca$x
if(res$scale != FALSE){
lenna.trunc <- scale(lenna.trunc, center = FALSE , scale=1/res$scale)
}
if(res$center != FALSE){
lenna.trunc <- scale(lenna.trunc, center = -1 * res$center, scale=FALSE)
}
# par(mfrow=c(1,2))
# image(t(t(lenna.noise)))
# image(lenna.trunc)
# par(mfrow=c(1,1))
## PCP
library(rpca)
pcpmod = rpca(lenna.noise)
r1 <- writePNG(lenna.noise,target="lenna_orig.png")
r <- writePNG(lenna.trunc,target="lenna_recon.png")
writePNG(pcpmod$L,target="lenna_recon_pcp.png")
